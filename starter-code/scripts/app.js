function init() {

  //GAME LOGIC

  // 1.) How will the game know that when I say A1, I mean cellNumber 1 and cellLetter A?
  // -Right now I have the information split into generating a cellNumber and cellLetter
  // -A function could assign that combo of cellNumber and cellLetter into one number (grid array index)?
  // (Like how on the console, pikachu marks the players number on the grid's array index)
  // -I would use this function for creating a ships location during set-up, and then being able to find that location during missile-fire
  
  // 2.) How will I create and store the ship's length?
  // -Once one cellNumber and cellLetter is randomly generated by a function, 
  // -Use that identification(A7, B1 etc) add 1, 2, etc. grid cells on to it to create horizonal or vertical length (A8 to A7, C1 and D1 to B1, etc)

  // 3.) How will I visibly place a ship on the grid?
  // Create a function that uses the cells stored in ship length array to add a class to each cell
  // Ship 1 can be blue, ship 2 can be green, etc.
  
  // 4.) How will the ships not intersect?
  // I have to find a way for the function to recognise if previously placed ships occupy that grid cell already 

  // 5.) How will ships not go off the board?
  // -I should look to the pikachu grid in order to use this method to restrict the borders of the grid
  
  // 6.) 

  // DOM VARIABLES
  const playerGrid = document.querySelector('.playerGrid')
  const computerGrid = document.querySelector('.computerGrid')
 
  // GAME VARIABLES
  const gridCells = []
  const width = 10
  const lettersArray = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']
  let lastCell

  // SHIP OBJECTS
  const ship1 = {
    //made up of grid cells: 1 x 2
    //fill empty array with grid squares when grid location is set (different every game)
    //a cellNumber and cellLetter are generated.
    //this becomes a grid index of 0-100.
    //a function will add horizonal or vertical height to this by choosing the nearest squares
    //store the squares here
    //add a class to them to make a ship of this length appear on the board
    length: []
  }

  const ship2 = {
    //made up of grid cells: 1 x 3
    length: []
  }

  const ship3 = {
    //made up of grid cells: 1 x 4
    length: []
  }

  const ship4 = {
    //made up of grid cells: 1 x 5
    length: []
  }


  //PLAYER GRID
  Array(width * width).join('.').split('.').forEach(() => {
    const cell = document.createElement('div')
    cell.classList.add('grid-item')
    gridCells.push(cell)
    playerGrid.appendChild(cell)
  })

  //COMPUTER GRID
  //Will be hidden once game is finished testing
  Array(width * width).join('.').split('.').forEach(() => {
    const cell = document.createElement('div')
    cell.classList.add('grid-item')
    gridCells.push(cell)
    computerGrid.appendChild(cell)
  })

  //First stage is: set-up
  //randomly place different sized ships on player and computer grid
  //-the ship cannot go off the board
  //-the ship cannot intersect another ship
  
  //Second stage is: player-chosen missile fire
  //player input is taken, such as A7 or B1
  //a missile can MISS, HIT, and SINK a ship

  //Third stage is: computer-generated missile fire
  //the computer choice is generated once per turn, after the player has had their turn
  //randomised input is generated, such as A7 or B1
  //a missile can MISS, HIT, and SINK a ship

  //STAGE ONE: SET-UP FUNCTIONS

  //a function that randomises a cellNumber (number between 0-9)
  function createNumber() {
    const idx = Math.floor(Math.random() * 10)
    if (idx === lastCell) {
      console.log('same cell was chosen')
      return createNumber()
    }
    lastCell = idx
    return idx
  }
  console.log(createNumber())

  //a function that calls createNumber function and stores it in ship1 locationNumber

  //a function that randomises a cellLetter
  //use an array of letters for this
  //and math.random to retreive an index of the array (the value is a string (single letter))


  //a function that takes the random cellNumber and cellLetter
  //adds nearby grid cells to make a different lengthed "ship"
  //stores info in ship1, ship2 etc object
  
}
window.addEventListener('DOMContentLoaded', init)